x <-
library("ggplot2")
qplot
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
y <- x^3
qplot(x, y)
x <- c(1, 2, 2, 2, 3, 3)
qplot(x, binwidth = 1)
x2 <- c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4)
qplot(x2, binwidth = 1)
qplot(x3, binwidth = 1)
x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3, binwidth = 1)
roll <- function() {
die <- 1:6 1
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
roll <- function() {
die <- 1:6 1
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
roll
roll()
roll()
roll()
roll()
replicate(10, roll())
rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)
?sample
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE, c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
sum(dice)
}
rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)
die <- c(1, 2, 3, 4, 5, 6)
die
is.vector(die)
int <- 1L
text <- "ace"
int <- c(1L, 5L)
text <- c("ace", "hearts")
int[1]
int[2]
sum(num)
sum(int)
sum(text)
typeof(text)
int <- c(-1L, 2L, 4L)
int
typeof(int)
sqrt(2)^2 - 2
hand <- c("ace", "king", "queen", "jack", "ten")
names(die) <- c("one", "two", "three", "four", "five", "six")
die
die
names(die) <- NULL
die
dim(die) <- c(2, 3)
die
dim(die) <- c(3, 2)
die
dim(die) <- c(1, 2, 3)
die
m <- matrix(die, nrow = 2)
m
m <- matrix(die, nrow = 2, byrow = TRUE)
m
ar <- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3))
ar
m <- matrix(c(hand, rep("spades", 5)), c(5, 2))
m
m <- matrix(c(hand, "spades"), c(5, 2))
m <- matrix(c(hand, rep("spades", 5)), c(5, 2))
hand1 <- m
Sys.time(). Sys.time
Sys.time()
mil <- 1000000
class(mil) <- c("POSIXct", "POSIXt")
mil
gender <- factor(c("male", "female", "female", "male"))
typeof(gender)
attributes(gender)
unclass(gender)
gender
as.character(gender)
card <- c("ace", "hearts", 1)
class(card)
list1 <- list(100:130, "R", list(TRUE, FALSE))
list1
card <- list("ace", "hearts", 1)
card
getwd()
setwd("~/Desktop/")
deck <- read.csv("deck.csv", header = TRUE)
View(deck)
head(deck)
write.csv(deck, file = "cards.csv", row.names = FALSE)
deal <- function () {}
deal <- function () { return deck[1,] }
deal <- function (cards) { return cards[1,] }
deal <- function(cards) {
cards[1, ]
}
deck2 <- deck[1:52, ]
random <- sample(1:52, size = 52)
deck2 <-deck[random, ]
View(deck2)
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deal(deck)
deck2 <- shuffle(deck)
deal(deck2)
deck2 <- deck
deck2$new <- 1:52
head(deck2)
deck2$new <- NULL
head(deck2)
deck2$face
deck2$face == "ace"
deck2$face == "Ace"
sum(deck2$face == "Ace")
deck3 <- shuffle(deck)
deck3$value[deck3$face == "ace"] <- 14
head(deck3)
deck3$value[deck3$face == "ace"] <- 14
head(deck3)
deck3$value[deck3$face == "Ace"] <- 14
head(deck3)
deck4 <- deck
deck4$value <- 0
head(deck4, 13)
deck4$suit == "hearts"
deck4$suit == "Hearts"
deck4$value[deck4$suit == "hearts"]
deck4$value[deck4$suit == "Hearts"]
deck4$value[deck4$suit == "Hearts"] <- 1
deck4$value[deck4$suit == "Hearts"] <- 1
queenOfSpades <- deck4$face == "queen" & deck4$suit == "spades"
queenOfSpades <- deck4$face == "Queen" & deck4$suit == "Spades"
deck4$face == "Queen" & deck4$suit == "Spades"
deck4[queenOfSpades, ]
deck4$value[queenOfSpades] <- 13
deck4[queenOfSpades, ]
deck5 <- deck
facecard <- deck5$face %in% c("king", "queen", "jack")
deck5[facecard, ]
facecard <- deck5$face %in% c("King", "Queen", "Jack")
deck5[facecard, ]
deck5$value[facecard] <- 10
head(deck5, 13)
deck5$value[deck5$face == "Ace"] <- NA
head(deck5, 13)
library(devtools)
install.packages("devtools")
library(devtools)
parenvs(all = TRUE)
as.environment("package:stats")
parent.env(globalenv())
ls(emptyenv())
ls(globalenv())
head(globalenv()$deck, 3)
assign("new", "Hello Global", envir = globalenv())
globalenv()$new
environment()
new <- "Hello Active"
new
show_env <- function(){
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
show_env()
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
DECK <- deck
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal()
deal()
deal()
shuffle <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle()
deal()
shuffle()
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
deal
shuffle
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
rm(deck)
shuffle()
deal()
deal()
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
score <- function (symbols) {
# identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
# get prize
if (same) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1]
}
# adjust for diamonds
diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds
}
play <- function() {
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
setwd("~/prog/R_proj/JH_course/rprog-data-ProgAssignment3-data/")
setwd("~/prog/R_proj/JH_course/rprog-data-ProgAssignment3-data/")
ls
